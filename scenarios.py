# -*- coding: utf-8 -*-
"""scenarios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KR3v5sQGKy2H8PUoVK0mfssQbcpw1IVj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

'''
  boundaries = 1 >>> B
  boundaries & time = 2 >>> B&T
  controls & boundaries & time = 3 >>> C&B&T
  controls & time = 4 >>> C&T
  final distance & time = 5 >>> Df&T
  final distance & controls & time = 6 >>> Df&C
  final distance = 7 >>> Df
  time = 8 >>> T
  controls = 9 >>> C
  controls & boundaries = 10 >>> C&B
  final distance & controls = 11 >>> Df & C
'''  


dict = {
  'B' : 1,
  'B & T' : 2,
  'C & B & T': 3,
  'C & T' : 4,
  'Df & T' : 5,
  'Df & C & T' : 6,
  'Df' : 7,
  'T' : 8,
  'C' : 9,
  'C & B' : 10,
  'Df & C' : 11}

val = list(dict.values())
keys = list(dict.keys())

list_a = []
list_y = []
list_s = []
list_time = []
list_method = []
for i in range(1,len(keys)+1):
  data = pd.read_json('/content/condition'+str(i)+'.json')
  list_a.append(np.array(list(data['A'])))
  list_y.append(np.array(list(data['Y'])))
  list_s.append(np.array(list(data['S'])))
  list_time.append(np.array(list(data['time'])))
  list_method.append(np.array(list(data['method'])))

ax = plt.axes(projection='3d')
ax.set_title('Routes')
ax.set_xlabel('A')
ax.set_ylabel('Y')
ax.set_zlabel('S')

##########box##############
'''
0.001 < a < 0.4273
0.3671 < y < 0.8134
0.6834 < s < 1.0
'''
a1 = 0
a2 = 0.4273
y1 = 0.3671
y2 = 0.8134
s1 = 0.6834
s2 = 1

points = np.array([[a1, y1, s1],
                  [a1, y1, s2 ],
                  [a2, y1, s2],
                  [a2, y1, s1],
                  [a2, y2, s1],
                  [a2, y2, s2],
                  [a1, y2, s2 ],
                  [a1, y2, s1]])

Z = np.zeros((8,3))
for i in range(8): Z[i,:] = points[i,:]

verts = [[Z[0],Z[1],Z[2],Z[3]],
 [Z[4],Z[5],Z[6],Z[7]], 
 [Z[0],Z[1],Z[6],Z[7]], 
 [Z[2],Z[3],Z[4],Z[5]], 
 [Z[1],Z[2],Z[5],Z[6]],
 [Z[4],Z[7],Z[0],Z[3]]]

ax.add_collection3d(Poly3DCollection(verts, 
 facecolors='g', linewidths=1, edgecolors='lightblue', alpha=.25 ))

############routes###############
for i in range(len(keys)):
  ax.scatter(list_a[i],list_y[i],list_s[i], label = keys[i-1] )

plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

shelter_time = [  0  ,   0 ,   50   , 50   ]
shelter_a = [a2,  a1 ,   a1  , a2 ]
shelter_y = [y2,  y1 ,   y1 , y2 ]
shelter_s = [s2 , s1 ,   s1  , s2 ]

for i in range(len(keys)):
  plt.scatter(list_time[i],list_a[i], label = keys[i] )
plt.title('A vs time')
plt.xlim(0,50)
plt.ylim(0,1)
plt.ylabel('A')
plt.xlabel('time (years)')

plt.fill(shelter_time, shelter_a , alpha = 0.2 , c = 'g',label = 'shelter boundaries')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

for i in range(len(keys)):
  plt.scatter(list_time[i],list_y[i], label = keys[i] )
plt.title('Y vs time')
plt.xlim(0,50)
plt.ylim(0,1)
plt.ylabel('Y')
plt.xlabel('time (years)')
plt.fill(shelter_time, shelter_y , alpha = 0.2 , c = 'g',label = 'shelter boundaries')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

for i in range(len(keys)):
  plt.scatter(list_time[i],list_s[i], label = keys[i] )
plt.title('S vs time')
plt.xlim(0,50)
plt.ylim(0,1)
plt.ylabel('S')
plt.xlabel('time (years)')

plt.fill(shelter_time, shelter_s , alpha = 0.2 , c = 'g',label = 'shelter boundaries')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

